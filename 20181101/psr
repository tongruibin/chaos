[TOC]
## 基本
- PHP代码 必须 使用 <?php ?> 长标签 或 <?= ?> 短输出标签；
- PHP代码 必须 使用 不带BOM的UTF-8 编码。
- 代码 必须 使用4个空格符而不是「Tab 键」进行缩进。
- 所有PHP文件 必须 使用 Unix LF (linefeed) 作为行的结束符。
- 所有PHP文件 必须 以一个空白行作为结束。(???????????????????)
- 纯PHP代码文件 必须 省略最后的 ?> 结束标签。
- PHP所有 关键字 必须 全部小写。
- 常量 true 、false 和 null 也 必须 全部小写。
- 行
    - 行的长度 一定不可 有硬性的约束。
    - 软性的长度约束 必须 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。
    - 每行 不该 多于80个字符，大于80字符的行 应该 折成多行。
    - 非空行后 一定不可 有多余的空格符。
    - 空行 可以 使得阅读代码更加方便以及有助于代码的分块。
    - 每行 一定不可 存在多于一条语句。

- 一份 PHP 文件中 应该 要不就只定义新的声明，如类、函数或常量等不产生 副作用 的操作，要不就只书写会产生 副作用 的逻辑操作。

    「副作用」一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。包含却不仅限于：
    生成输出
    直接的 require 或 include
    连接外部服务
    修改 ini 配置
    抛出错误或异常
    修改全局或静态变量
    读或写文件等


## 控制结构
控制结构的基本规范如下：

- 控制结构关键词后 必须 有一个空格。
- 左括号 ( 后 一定不可 有空格。
- 右括号 ) 前也 一定不可 有空格。
- 右括号 ) 与开始花括号 { 间 必须 有一个空格。
- 结构体主体 必须 要有一次缩进。
- 结束花括号 } 必须 在结构体主体后单独成行。
- 每个结构体的主体都 必须 被包含在成对的花括号之中，

### if, elseif, else
应该 使用关键词 elseif 代替所有 else if

    <?php
    if ($expr1) {
        // if body
    } elseif ($expr2) {
        // elseif body
    } else {
        // else body;
    }

### switch, case
case 语句 必须 相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。
如果存在非空的 case 直穿语句，主体里 必须 有类似 // no break 的注释。

    <?php
    switch ($expr) {
        case 0:
            echo 'First case, with a break';
            break;
        case 1:
            echo 'Second case, which falls through';
            // no break
        case 2:
        case 3:
        case 4:
            echo 'Third case, return instead of break';
            return;
        default:
            echo 'Default case';
            break;
    }

### while
    <?php
    while ($expr) {
        // 结构体
    }

### do while
    <?php
    do {
        // 结构体
    } while ($expr);

### for
    <?php
    for ($i = 0; $i < 10; $i++) {
        // for 循环主体
    }

### foreach
    <?php
    foreach ($iterable as $key => $value) {
        // foreach 主体
    }

### try, catch
    <?php
    try {
        // try 主体
    } catch (FirstExceptionType $e) {
        // catch 主体
    } catch (OtherExceptionType $e) {
        // catch 主体
    }


## 闭包
闭包声明时，关键词 function 后以及关键词 use 的前后都 必须 要有一个空格。
开始花括号 必须 写在声明的同一行，结束花括号 必须 紧跟主体结束的下一行。
参数列表和变量列表的左括号后以及右括号前，一定不可 有空格。
参数和变量列表中，逗号前 一定不可 有空格，而逗号后 必须 要有空格。
闭包中有默认值的参数 必须 放到列表的后面。

    <?php
    $closureWithArgs = function ($arg1, $arg2) {
        // 主体
    };

    $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {
        // 主体
    };

参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表的右括号与闭包的开始花括号 必须 放在同一行。

    <?php
    $longArgs_noVars = function (
        $longArgument,
        $longerArgument,
        $muchLongerArgument
    ) {
        // 主体
    };

    $noArgs_longVars = function () use (
        $longVar1,
        $longerVar2,
        $muchLongerVar3
    ) {
        // 主体
    };

    $longArgs_longVars = function (
        $longArgument,
        $longerArgument,
        $muchLongerArgument
    ) use (
        $longVar1,
        $longerVar2,
        $muchLongerVar3
    ) {
        // 主体
    };

    $longArgs_shortVars = function (
        $longArgument,
        $longerArgument,
        $muchLongerArgument
    ) use ($var1) {
        // 主体
    };

    $shortArgs_longVars = function ($arg) use (
        $longVar1,
        $longerVar2,
        $muchLongerVar3
    ) {
        // 主体
    };

注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。

    <?php
    $foo->bar(
        $arg1,
        function ($arg2) use ($var1) {
            // 主体
        },
        $arg3
    );


## 类
此处的「类」指代所有的类、接口以及可复用代码块（traits）
类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范。

### 常量
类的常量中所有字母都 必须 大写，词间以下划线分隔。

### 属性
属性命名 可以 遵循：
    大写开头的驼峰式 ($StudlyCaps)
    小写开头的驼峰式 ($camelCase)
    下划线分隔式 ($under_score)
每个属性都 必须 添加访问修饰符。
一定不可 使用关键字 var 声明一个属性。
每条语句 一定不可 定义超过一个属性。
不该 使用下划线作为前缀，来区分属性是 protected 或 private。

### 方法
必须 符合 camelCase() 式的小写开头驼峰命名规范。
所有方法都 必须 添加访问修饰符。
不该 使用下划线作为前缀，来区分方法是 protected 或 private。
方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。

### 方法的参数
参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。
有默认值的参数，必须 放到参数列表的末尾。

    <?php
    namespace Vendor\Package;

    class ClassName
    {
        public function foo($arg1, &$arg2, $arg3 = [])
        {
            // 方法主体
        }
    }

参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。
拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。

    <?php
    namespace Vendor\Package;

    class ClassName
    {
        public function aVeryLongMethodName(
            ClassTypeHint $arg1,
            &$arg2,
            array $arg3 = []
        ) {
            // 方法主体
        }
    }

### 方法及函数调用
方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个逗号前 一定不可 有空格，但其后 必须 有一个空格。

    <?php
    bar();
    $foo->bar($arg1);
    Foo::bar($arg2, $arg3);

参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。

    <?php
    $foo->bar(
        $longArgument,
        $longerArgument,
        $muchLongerArgument
    );

### 扩展与继承
关键词 extends 和 implements 必须 写在类名称的同一行。
类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行。

    <?php
    namespace Vendor\Package;

    use FooClass;
    use BarClass as Bar;
    use OtherVendor\OtherPackage\BazClass;

    class ClassName extends ParentClass implements \ArrayAccess, \Countable
    {
        // 这里面是常量、属性、类方法
    }

implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。

    <?php
    namespace Vendor\Package;

    use FooClass;
    use BarClass as Bar;
    use OtherVendor\OtherPackage\BazClass;

    class ClassName extends ParentClass implements
        \ArrayAccess,
        \Countable,
        \Serializable
    {
        // 这里面是常量、属性、类方法
    }


### abstract, final, 和 static 关键字
需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。

    <?php
    namespace Vendor\Package;

    abstract class ClassName
    {
        protected static $foo;

        abstract protected function zim();

        final public static function bar()
        {
            // 方法主体
        }
    }

## 命名空间(namespace)和使用声明(use)
根据规范，每个类都独立为一个文件，且命名空间至少有一个层次：顶级的组织名称（vendor name）
namespace 声明后 必须 插入一个空白行。
所有 use 必须 在 namespace 后声明。
每条 use 声明语句 必须 只有一个 use 关键词。
use 声明语句块后 必须 要有一个空白行。

    <?php
    namespace Vendor\Package;

    use FooClass;
    use BarClass as Bar;
    use OtherVendor\OtherPackage\BazClass;

    // ... 其他 PHP 代码 ...
